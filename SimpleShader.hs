module SimpleShader where

vertexShaderProgram :: [String]
vertexShaderProgram = [
  "#version 120\n",
  "\n",
  "#define MAX_LIGHTS 1\n",
  "\n",
  "attribute vec3 VertexPosition;\n",
  "attribute vec3 VertexNormal;\n",
  "\n",
  "struct LightStruct {\n",
  "  vec3 location;\n",
  "  vec4 diffuse;\n",
  "  vec4 ambient;\n",
  "  vec4 specular;\n",
  "};\n",
  "\n",
  "uniform LightStruct Lights[MAX_LIGHTS];\n",
  "\n",
  "varying vec3 baseNormal;\n",
  "\n",
  "void main() {\n",
  "  gl_Position = gl_ModelViewProjectionMatrix * vec4(VertexPosition, 1.0);\n",
  "  baseNormal = gl_NormalMatrix * VertexNormal;\n",
  "}\n"]

fragmentShaderProgram :: [String]
fragmentShaderProgram = [
  "#version 120\n",
  "\n",
  "#define MAX_LIGHTS 1\n",
  "\n",
  "struct MaterialStruct {\n",
  "  vec4 ambient;\n",
  "  vec4 diffuse;\n",
  "  vec4 specular;\n",
  "  float shininess;\n",
  "};\n",
  "\n",
  "uniform MaterialStruct Material;\n",
  "uniform vec4 GlobalAmbient;\n",
  "\n",
  "struct LightStruct {\n",
  "  vec3 location;\n",
  "  vec4 diffuse;\n",
  "  vec4 ambient;\n",
  "  vec4 specular;\n",
  "};\n",
  "\n",
  "uniform LightStruct Lights[MAX_LIGHTS];\n",
  "\n",
  "varying vec3 baseNormal;\n",
  "vec3 ECLightHalf[MAX_LIGHTS];\n",
  "vec3 ECLightLoc[MAX_LIGHTS];\n",
  "\n",
  "float clamp(float val) {\n",
  "  if (val < 0) {\n",
  "    return 0;\n",
  "  }\n",
  "  if (val > 1) {\n",
  "    return 1;\n",
  "  }\n",
  "  return val;\n",
  "}\n",
  "\n",
  "void main() {\n",
  "  vec4 fragColor = GlobalAmbient * Material.ambient;\n",
  "  int i;\n",
  "  for (i = 0; i < MAX_LIGHTS; i++) {\n",
  "    ECLightLoc[i] = normalize(Lights[i].location);\n",
  "    ECLightHalf[i] = normalize(ECLightLoc[i] - vec3(0, 0, -1));\n",
  "    float diffuse = dot(normalize(baseNormal), ECLightLoc[i]);\n",
  "    float diffuseWeight = clamp(diffuse);\n",
  "\n",
  "    float specWeight = 0.0;\n",
  "    if (diffuse > -0.05) {\n",
  "      specWeight = pow(clamp(dot(ECLightHalf[i], normalize(baseNormal))),\n",
  "                                    10.0);//Material.shininess);\n",
  "    }\n",
  "\n",
  "    fragColor += (\n",
  "      (Lights[i].ambient * Material.ambient) +\n",
  "      (Lights[i].diffuse * Material.diffuse * diffuseWeight) +\n",
  "      (Lights[i].specular * Material.specular * specWeight));\n",
  "    }\n",
  "  gl_FragColor = clamp(fragColor, 0.0, 1.0);\n",
  "}\n"]
